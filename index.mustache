<!doctype html>
<html lang="en" class="h-100">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
        <link rel="stylesheet" href="/lib/css/bootstrap.min.css">
        <link rel="stylesheet" href="/lib/css/open-iconic-bootstrap.min.css">
        <link rel="stylesheet" href="/lib/css/vis.min.css">
        <style>
            .shadow {
                -webkit-box-shadow: 3px 3px 5px 6px #ccc;
                -moz-box-shadow:    3px 3px 5px 6px #ccc;
                box-shadow:         3px 3px 5px 6px #ccc;
            }
        </style>
        <title>{{title}}</title>
        <nav class="navbar navbar-expand-md navbar-fixed-top navbar-dark bg-dark">
            <div class="container justify-content-center">
                <ul class="nav navbar-nav flex-fill w-100 flex-nowrap">
                    <span class="navbar-brand"><span class="oi oi-project"></span>&nbsp;{{title}} - {{author}}</span>
                </ul>
                <ul class="nav navbar-nav flex-fill w-100 justify-content-center">
                    <li class="nav-item">
                        <button id="monitor" class="btn btn-outline-light mx-2 my-2 my-sm-0 disabled" type="button">M</button>
                    </li>
                    <li class="nav-item">
                        <button id="analyze" class="btn btn-outline-light mx-2 my-2 my-sm-0 disabled" type="button">A</button>
                    </li>
                    <li class="nav-item">
                        <button id="plan" class="btn btn-outline-light mx-2 my-2 my-sm-0 disabled" type="button">P</button>
                    </li>
                    <li class="nav-item">
                        <button id="execute" class="btn btn-outline-light mx-2 my-2 my-sm-0 disabled" type="button">E</button>
                    </li>
                </ul>
                <ul class="nav navbar-nav flex-fill w-100 justify-content-end">
                    <li class="nav-item">
                        <button id="backward" class="btn btn-outline-secondary mx-2 my-2 my-sm-0 disabled" type="button"><span class="oi oi-media-step-backward"></span></button>
                    </li>
                    <li>
                        <button id="play-pause" class="btn btn-outline-success mx-2 my-2 my-sm-0" type="button"><span class="oi oi-media-play"></span></button>
                    </li>
                    <li>
                        <button id="stop" class="btn btn-outline-danger mx-2 my-2 my-sm-0 disabled" type="button"><span class="oi oi-media-stop"></span></button>
                    </li>
                    <li>
                        <button id="forward" class="btn btn-outline-secondary mx-2 my-2 my-sm-0 disabled" type="button"><span class="oi oi-media-step-forward"></span></button>
                    </li>
                </ul>
            </div>
        </nav>
    </head>
    <body style="height:90%;">
        <div class="container h-100 py-3">
            <div class="row h-100">
                <div class="col h-100">
                    <div id="s-tree" class="container h-100 shadow"></div>
                </div>
                <div class="col h-100">
                    <div id="d-tree" class="container h-100 shadow"></div>
                </div>
            </div>
        </div>
        <script src="/lib/js/jquery.min.js"></script>
        <script src="/lib/js/popper.min.js"></script>
        <script src="/lib/js/bootstrap.bundle.min.js"></script>
        <script src="/lib/js/vis.min.js"></script>
        <script src="/lib/js/axios.min.js"></script>
        <script src="/app/app.js"></script>
        <script>

            // create an array with nodes
            let nodes = new vis.DataSet([
                {id: 1, label: 'Node 1'},
                {id: 2, label: 'Node 2'},
                {id: 3, label: 'Node 3'},
                {id: 4, label: 'Node 4'},
                {id: 5, label: 'Node 5'}
            ]);

            // create an array with edges
            let edges = new vis.DataSet([
                {from: 1, to: 3},
                {from: 1, to: 2},
                {from: 2, to: 4},
                {from: 2, to: 5}
            ]);

            // create a network
            let s_tree = document.getElementById('s-tree');
            let d_tree = document.getElementById('d-tree');

            // provide the data in the vis format
            let data = {
                nodes: nodes,
                edges: edges
            };

            let locales = {
                en: {
                    edit: 'Edit',
                    del: 'Delete selected',
                    back: 'Back',
                    addNode: 'Add Node',
                    addEdge: 'Add Edge',
                    editNode: 'Edit Node',
                    editEdge: 'Edit Edge',
                    addDescription: 'Click in an empty space to place a new node.',
                    edgeDescription: 'Click on a node and drag the edge to another node to connect them.',
                    editEdgeDescription: 'Click on the control points and drag them to a node to connect to it.',
                    createEdgeError: 'Cannot link edges to a cluster.',
                    deleteClusterError: 'Clusters cannot be deleted.',
                    editClusterError: 'Clusters cannot be edited.'
                }
            }
            let options = {
                autoResize: true,
                height: '100%',
                width: '100%',
                locale: 'en',
                locales: locales,
                clickToUse: false,
            };

            // initialize your network!
            let s_network = new vis.Network(s_tree, data, options);
            let d_network = new vis.Network(d_tree, data, options);
        </script>
    </body>
</html>

